plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group = 'al.yn'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    // CommandAPI.
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io'
    }

    // NBT-API (By CommandAPI).
    maven {
        name = 'CodeMC'
        url = 'https://repo.codemc.org/repository/maven-public/'
    }

    // SimplixCore.
    maven {
        name = 'simplixsoft-public'
        url = 'https://repo.simplix.dev/repository/simplixsoft-public/'
    }
    
    maven { 
        name = 'PaperMC'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.18.1-R0.1-SNAPSHOT'

    // qyl: There are already some wheels, why code it twice.
//    compileOnly group: 'cx.rain', name: 'Qore', version: '-SNAPSHOT', changing: true

    compileOnly 'org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT'
    annotationProcessor 'org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT'

    // CommandAPI.
    compileOnly "dev.jorel.CommandAPI:commandapi-core:6.5.4"
    compileOnly "dev.jorel.CommandAPI:commandapi-annotations:6.5.4"
    annotationProcessor "dev.jorel.CommandAPI:commandapi-annotations:6.5.4"

    // NightConfig.
    implementation 'com.electronwill.night-config:toml:3.6.5'
}

shadowJar {
    dependencies {
        include dependency('com.electronwill.night-config:toml:3.6.5')
    }
    relocate 'com', 'libraries.com'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar.finalizedBy(shadowJar)
